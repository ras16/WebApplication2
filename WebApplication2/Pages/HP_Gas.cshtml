@page
@model WebApplication2.Pages.GazModel
@{
}

<!DOCTYPE html>
<html lang="en">
<head>

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HP Gas Wells Dashboard</title>
    <link rel="stylesheet" href="~/css/gaz.css" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable/styles/handsontable.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable/styles/ht-theme-main.min.css" />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>

<body>

    <!-- Main Content -->
    <div class="container">
        <!-- Well Pool Selection -->
        <section class="well-pool-section">
            <h2 class="section-title">
                <span class="section-icon">
                    <i class="fas fa-layer-group"></i>
                </span>
                Well Pool Configuration
            </h2>

            <div class="well-selection">
                <div class="select-box">
                    <h3>Available Wells</h3>
                    <select id="listBox1" multiple>
                        @foreach (var well in Model.WellsList)
                        {
                            <option value="@well.WellID">@well.WellID - @well.WellName</option>
                        }
                    </select>
                </div>

                <div class="transfer-controls">
                    <button id="btnMoveRight" class="transfer-btn" title="Add to Pool">
                        <i class="fas fa-arrow-right"></i>
                    </button>
                    <button id="btnMoveLeft" class="transfer-btn" title="Remove from Pool">
                        <i class="fas fa-arrow-left"></i>
                    </button>
                </div>

                <div class="select-box">
                    <h3>Selected Pool</h3>
                    <select id="listBox2" multiple>
                    </select>
                </div>
            </div>

            @* <button id="AddWell" class="add-well-btn"> *@
            @*     <i class="fas fa-plus"></i> *@
            @*     Add New Well to Pool *@
            @* </button> *@
        </section>

        <!-- Summary Dashboard -->
        <section class="summary-section">
            <div class="section-header">
                <h2><i class="fas fa-chart-line"></i> Production Summary</h2>
            </div>
            <div class="summary-grid">
                <div class="summary-card primary">
                    <div class="card-icon">
                        <i class="fas fa-fire"></i>
                    </div>
                    <div class="card-content">
                        <h3>Total Gas Rate</h3>
                        <div class="value" id="totalGasRate">0</div>
                        <div class="unit">m³/d</div>
                    </div>
                </div>

                <div class="summary-card secondary">
                    <div class="card-icon">
                        <i class="fas fa-gauge-high"></i>
                    </div>
                    <div class="card-content">
                        <h3>Avg Tbg Chk</h3>
                        <div class="value" id="avgTbgChk">0</div>
                        <div class="unit">mm</div>
                    </div>
                </div>

                <div class="summary-card accent">
                    <div class="card-icon">
                        <i class="fas fa-thermometer-half"></i>
                    </div>
                    <div class="card-content">
                        <h3>Avg Flowing THP</h3>
                        <div class="value" id="avgTHP">0</div>
                        <div class="unit">bar</div>
                    </div>
                </div>

                <div class="summary-card warning">
                    <div class="card-icon">
                        <i class="fas fa-temperature-high"></i>
                    </div>
                    <div class="card-content">
                        <h3>Avg Flowing THT</h3>
                        <div class="value" id="avgTHT">0</div>
                        <div class="unit">°F</div>
                    </div>
                </div>

                <div class="summary-card danger">
                    <div class="card-icon">
                        <i class="fas fa-clock"></i>
                    </div>
                    <div class="card-content">
                        <h3>Down Time</h3>
                        <div class="value" id="totalDownTime">0</div>
                        <div class="unit">hrs</div>
                    </div>
                </div>

                <div class="summary-card success">
                    <div class="card-icon">
                        <i class="fas fa-droplet"></i>
                    </div>
                    <div class="card-content">
                        <h3>Separator Liquid Rate</h3>
                        <div class="value" id="totalLiquidRate">0</div>
                        <div class="unit">m³/d</div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Data Management Section -->
        <section class="data-section">
            <div class="section-header">
                <h2><i class="fas fa-database"></i> Data Management</h2>
            </div>

            <!-- Filter Panel -->
            <div class="date-filter-panel">
                <div class="date-filter-group">
                    <label for="dateFrom">From:</label>
                    <input type="date" id="dateFrom" />
                </div>
                <div class="date-filter-group">
                    <label for="dateTo">To:</label>
                    <input type="date" id="dateTo" />
                </div>
                <div class="filter-buttons">
                    <button id="applyFilter" class="btn-filter">Apply Filter</button>
                    <button id="clearFilter" class="btn-clear">Clear Date Filter</button>
                </div>
                <div class="filter-status" id="filterStatus"></div>
                <div class="filter-status" id="wellFilterStatus"></div>
            </div>

            <!-- Control Panel -->
            <div class="control-panel">
                <div class="control-group">
                    <button id="saveChanges" class="btn success">
                        <i class="fas fa-save"></i>
                        Save Changes
                    </button>
                    <button id="addRow" class="btn primary">
                        <i class="fas fa-plus"></i>
                        Add New Row
                    </button>
                    <button id="exportCSV" class="btn accent">
                        <i class="fas fa-download"></i>
                        Export CSV
                    </button>
                </div>
                <div id="statusMessage" class="status-message"></div>
            </div>

            <!-- Data Table -->
            <div class="table-container">
                <div id="handsontable-grid" class="data-grid"></div>
            </div>

            <!-- Pagination -->
            <div class="pagination-container">
                <div class="pagination-controls">
                    <button id="firstPage" class="pagination-btn" title="First Page">
                        <i class="fas fa-angle-double-left"></i>
                    </button>
                    <button id="prevPage" class="pagination-btn" title="Previous Page">
                        <i class="fas fa-angle-left"></i>
                    </button>
                    <div id="pageButtons" class="page-numbers"></div>
                    <button id="nextPage" class="pagination-btn" title="Next Page">
                        <i class="fas fa-angle-right"></i>
                    </button>
                    <button id="lastPage" class="pagination-btn" title="Last Page">
                        <i class="fas fa-angle-double-right"></i>
                    </button>
                </div>
                <div class="pagination-info">
                    Page <span id="currentPage">1</span> of <span id="totalPages">1</span> |
                    Total Records: <span id="totalRecords">0</span>
                </div>
            </div>
        </section>

    </div>

    <script src="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js"></script>

    <script>
        // Global variables
        let selectedWells = [];
        let currentPage = @Model.CurrentPage;
        let totalPages = @Model.TotalPages;
        let totalRecords = @Model.TotalRecords;
        const pageSize = @Model.PageSize;
        let currentFromDate = null;
        let currentToDate = null;

        // Initialize data array
        const gasData = [
        @foreach (var item in Model.HP_GasDataList)
        {
            <text>
                                {
                                    "id": @item.ID,
                                    "wellId": @item.WellID,
                                    "date": "@(item.date.ToString("MM/dd/yyyy"))",
                                    "flowRate": @(item.flow_rate_m3_per_day?.ToString() ?? "null"),
                                    "tbgChk": @(item.tbg_chk_mm?.ToString() ?? "null"),
                                    "fthpBar": @(item.fthp_bar?.ToString() ?? "null"),
                                    "pipeId": @(item.pipe_id_mm?.ToString() ?? "null"),
                                    "orifice": @(item.orifice_mm?.ToString() ?? "null"),
                                    "diffP": @(item.diff_p_in_H2O?.ToString() ?? "null"),
                                    "fthtF": @(item.ftht_f?.ToString() ?? "null"),
                                    "downTime": @(item.down_time_hrs?.ToString() ?? "null"),
                                    "sepLiqRate": @(item.Sep_liq_rate_m3_per_day?.ToString() ?? "null"),
                                    "comments": "@(item.Comments?.Replace("\"", "\\\"") ?? "")"
                                },
            </text>
        }
        ];

        // Define WellID options for dropdown
        const wellIdOptions = [
        @foreach (var well in Model.WellsList)
        {
            <text>
                                {
                                    id: @well.WellID,
                                    name: "@(well.WellID + " - " + well.WellName)"
                                },
            </text>
        }
        ];

        // Get the anti-forgery token
        const antiForgeryToken = $('input:hidden[name="__RequestVerificationToken"]').val();

        // Function to check if this is a fresh page load (not navigation)
        function isFreshPageLoad() {
            if (performance && performance.navigation) {
                return performance.navigation.type === performance.navigation.TYPE_RELOAD;
            }
            return !window.history.state;
        }

        // Function to clear all filters and URL parameters
        function clearAllFiltersOnRefresh() {
            const url = new URL(window.location.href);
            url.searchParams.delete('dateFrom');
            url.searchParams.delete('dateTo');
            url.searchParams.delete('selectedWells');
            url.searchParams.set('CurrentPage', '1');

            window.history.replaceState(null, '', url);

            currentFromDate = null;
            currentToDate = null;
            selectedWells = [];
            currentPage = 1;

            document.getElementById('dateFrom').value = '';
            document.getElementById('dateTo').value = '';
            $("#listBox2 option").appendTo("#listBox1");

            updateFilterStatus();
            updateWellFilterStatus();
        }

        // Function to restore well selection from URL (only for navigation, not refresh)
        function restoreWellSelectionFromURL() {
            if (isFreshPageLoad()) {
                return;
            }

            const urlParams = new URLSearchParams(window.location.search);
            const urlSelectedWells = urlParams.getAll('selectedWells');

            if (urlSelectedWells.length > 0) {
                $("#listBox2").empty();
                selectedWells = [];

                urlSelectedWells.forEach(wellId => {
                    const option = $(`#listBox1 option[value="${wellId}"]`);
                    if (option.length > 0) {
                        option.appendTo("#listBox2");
                    } else {
                        // Find well info and create option
                        const wellInfo = wellIdOptions.find(w => w.id.toString() === wellId);
                        if (wellInfo) {
                            $("<option>").val(wellId).text(wellInfo.name).appendTo("#listBox2");
                        }
                    }
                    selectedWells.push(parseInt(wellId));
                });

                updateWellFilterStatus();
                console.log("Restored well selection from URL:", selectedWells);
            }
        }

        // Function to update the selectedWells array
        function updateSelectedWells() {
            selectedWells = [];
            $("#listBox2 option").each(function() {
                selectedWells.push(parseInt($(this).val()));
            });

            console.log("Selected wells:", selectedWells);
            updateWellFilterStatus();

            if (!isFreshPageLoad()) {
                updateURLWithCurrentState();
            }
        }

        // Function to show current well filter status
        function updateWellFilterStatus() {
            let statusText = '';
            if (selectedWells.length > 0) {
                let wellNames = [];
                $("#listBox2 option").each(function() {
                    wellNames.push($(this).text());
                });
                statusText = `Well Filter: ${wellNames.join(', ')}`;
            } else {
                statusText = 'All wells shown';
            }

            let statusElement = document.getElementById('wellFilterStatus');
            if (!statusElement) {
                statusElement = document.createElement('div');
                statusElement.id = 'wellFilterStatus';
                statusElement.className = 'filter-status';
                statusElement.style.marginTop = '10px';
                statusElement.style.fontWeight = 'bold';
                statusElement.style.color = '#28a745';
                document.querySelector('.date-filter-panel').appendChild(statusElement);
            }
            statusElement.textContent = statusText;
        }

        // Function to apply well filter
        function applyWellFilter() {
            showStatus('Applying well filter...', 'success');
            currentPage = 1;
            loadPageData(currentPage);
        }

        // Function to update URL with current state
        function updateURLWithCurrentState() {
            if (history.replaceState) {
                const newUrl = new URL(window.location.href);

                newUrl.searchParams.set('CurrentPage', currentPage);

                if (currentFromDate) {
                    newUrl.searchParams.set('dateFrom', currentFromDate);
                } else {
                    newUrl.searchParams.delete('dateFrom');
                }

                if (currentToDate) {
                    newUrl.searchParams.set('dateTo', currentToDate);
                } else {
                    newUrl.searchParams.delete('dateTo');
                }

                newUrl.searchParams.delete('selectedWells');
                selectedWells.forEach(wellId => {
                    newUrl.searchParams.append('selectedWells', wellId);
                });

                window.history.replaceState({
                    page: currentPage,
                    dateFrom: currentFromDate,
                    dateTo: currentToDate,
                    selectedWells: [...selectedWells]
                }, '', newUrl);
            }
        }

        // Initialize from URL parameters (only for navigation, not refresh)
        function initializeFromURLParameters() {
            if (isFreshPageLoad()) {
                return;
            }

            const urlParams = new URLSearchParams(window.location.search);
            const urlFromDate = urlParams.get('dateFrom');
            const urlToDate = urlParams.get('dateTo');

            if (urlFromDate || urlToDate) {
                currentFromDate = urlFromDate;
                currentToDate = urlToDate;
                document.getElementById('dateFrom').value = currentFromDate || '';
                document.getElementById('dateTo').value = currentToDate || '';
                updateFilterStatus();
            }
        }

        // Document ready function
        $(document).ready(function () {
            if (isFreshPageLoad()) {
                clearAllFiltersOnRefresh();
            } else {
                initializeFromURLParameters();
                restoreWellSelectionFromURL();
            }

            $("#btnMoveRight").click(function () {
                $("#listBox1 option:selected").appendTo("#listBox2");
                updateSelectedWells();
                applyWellFilter();
            });

            $("#btnMoveLeft").click(function () {
                $("#listBox2 option:selected").appendTo("#listBox1");
                updateSelectedWells();
                applyWellFilter();
            });
        });

        // Initialize HandsOnTable
        const container = document.getElementById('handsontable-grid');
        let hot = new Handsontable(container, {
            data: gasData,
            colHeaders: ["Well ID", "Date", "Qo (m³/d)", "Tbg Chk (mm)", "FTHP (bar)", "Pipe ID (mm)",
                        "Orifice (mm)", "Diff P (in H₂O)", "FTHT (°F)", "Down Time (hrs)", "Sep Liq Rate (m³/d)", "Comments", "ID"],
            columns: [
               {
                data: "wellId",
                type: 'dropdown',
                source: wellIdOptions.map(well => well.name),
                strict: true,
                width: 200,
                renderer: function(instance, td, row, col, prop, value, cellProperties) {
                    Handsontable.renderers.TextRenderer.apply(this, arguments);

                    const matchingWell = wellIdOptions.find(well =>
                        well.name === value || well.id.toString() === value
                    );

                    td.textContent = matchingWell ? matchingWell.name : value;
                }
            },
                { data: "date", type: "date", dateFormat: 'MM/DD/YYYY', correctFormat: true, width: 100 },
                { data: "flowRate", type: "numeric", width: 120, numericFormat: { pattern: '0,0.00' } },
                { data: "tbgChk", type: "numeric", width: 120, numericFormat: { pattern: '0.00' } },
                { data: "fthpBar", type: "numeric", width: 120, numericFormat: { pattern: '0.00' } },
                { data: "pipeId", type: "numeric", width: 120, numericFormat: { pattern: '0.00' } },
                { data: "orifice", type: "numeric", width: 120, numericFormat: { pattern: '0.00' } },
                { data: "diffP", type: "numeric", width: 120, numericFormat: { pattern: '0.00' } },
                { data: "fthtF", type: "numeric", width: 120, numericFormat: { pattern: '0.00' } },
                { data: "downTime", type: "numeric", width: 120, numericFormat: { pattern: '0.00' } },
                { data: "sepLiqRate", type: "numeric", width: 120, numericFormat: { pattern: '0.00' } },
                { data: "comments", type: "text", width: 200 },
                { data: "id", type: "numeric", width: 50, readOnly: true }
            ],
            hiddenColumns: {
                columns: [12]  // Hide ID column
            },
            rowHeaders: true,
            height: '500',
            width: '100%',
            stretchH: 'all',
            manualColumnResize: true,
            manualRowResize: true,
            contextMenu: true,
            licenseKey: 'non-commercial-and-evaluation',
            afterChange: function(changes, source) {
                     if (!changes || source === 'loadData') return;

                if (changes.some(change => change[1] === 'wellId')) {
                    changes.forEach(change => {
                        const [row, prop, oldValue, newValue] = change;
                        if (prop === 'wellId') {
                            const matchingWell = wellIdOptions.find(well => well.name === newValue);
                            if (matchingWell) {
                                hot.setDataAtRowProp(row, 'wellId', matchingWell.id);
                            }
                        }
                    });
                }

                updateSummaryTotals();
            }
        });

        // Date Filter Functions
        function updateFilterStatus() {
            const statusElement = document.getElementById('filterStatus');
            if (currentFromDate || currentToDate) {
                let statusText = 'Date Filter: ';
                if (currentFromDate && currentToDate) {
                    statusText += `${currentFromDate} to ${currentToDate}`;
                } else if (currentFromDate) {
                    statusText += `From ${currentFromDate}`;
                } else if (currentToDate) {
                    statusText += `To ${currentToDate}`;
                }
                statusElement.textContent = statusText;
                statusElement.style.color = '#28a745';
            } else {
                statusElement.textContent = 'No date filter applied';
                statusElement.style.color = '#6c757d';
            }
        }

        // Date filter event listeners
        document.getElementById('applyFilter').addEventListener('click', function() {
            const fromDateInput = document.getElementById('dateFrom');
            const toDateInput = document.getElementById('dateTo');

            currentFromDate = fromDateInput.value || null;
            currentToDate = toDateInput.value || null;

            if (currentFromDate && currentToDate && currentFromDate > currentToDate) {
                showStatus('Error: From date cannot be later than To date', 'error');
                return;
            }

            updateFilterStatus();
            currentPage = 1;
            updateURLWithCurrentState();
            loadPageData(currentPage);
        });

        document.getElementById('clearFilter').addEventListener('click', function() {
            document.getElementById('dateFrom').value = '';
            document.getElementById('dateTo').value = '';
            currentFromDate = null;
            currentToDate = null;
            updateFilterStatus();
            currentPage = 1;
            updateURLWithCurrentState();
            loadPageData(currentPage);
        });

        // Initialize filter status
        updateFilterStatus();
        updateWellFilterStatus();

        // Function to calculate and update summary totals
        function updateSummaryTotals() {
            const data = hot.getSourceData();
            let totalGasRate = 0;
            let totalDownTime = 0;
            let totalLiquidRate = 0;

            let totalTbgChk = 0;
            let totalTHP = 0;
            let totalTHT = 0;
            let tbgChkCount = 0;
            let thpCount = 0;
            let thtCount = 0;

            data.forEach(row => {
                if (row.flowRate && !isNaN(parseFloat(row.flowRate))) {
                    totalGasRate += parseFloat(row.flowRate);
                }
                if (row.downTime && !isNaN(parseFloat(row.downTime))) {
                    totalDownTime += parseFloat(row.downTime);
                }
                if (row.sepLiqRate && !isNaN(parseFloat(row.sepLiqRate))) {
                    totalLiquidRate += parseFloat(row.sepLiqRate);
                }
                if (row.tbgChk && !isNaN(parseFloat(row.tbgChk))) {
                    totalTbgChk += parseFloat(row.tbgChk);
                    tbgChkCount++;
                }
                if (row.fthpBar && !isNaN(parseFloat(row.fthpBar))) {
                    totalTHP += parseFloat(row.fthpBar);
                    thpCount++;
                }
                if (row.fthtF && !isNaN(parseFloat(row.fthtF))) {
                    totalTHT += parseFloat(row.fthtF);
                    thtCount++;
                }
            });

            const avgTbgChk = tbgChkCount > 0 ? totalTbgChk / tbgChkCount : 0;
            const avgTHP = thpCount > 0 ? totalTHP / thpCount : 0;
            const avgTHT = thtCount > 0 ? totalTHT / thtCount : 0;

            document.getElementById('totalGasRate').textContent = totalGasRate.toLocaleString(undefined, {maximumFractionDigits: 2});
            document.getElementById('totalDownTime').textContent = totalDownTime.toLocaleString(undefined, {maximumFractionDigits: 2});
            document.getElementById('totalLiquidRate').textContent = totalLiquidRate.toLocaleString(undefined, {maximumFractionDigits: 2});
            document.getElementById('avgTbgChk').textContent = avgTbgChk.toLocaleString(undefined, {maximumFractionDigits: 2});
            document.getElementById('avgTHP').textContent = avgTHP.toLocaleString(undefined, {maximumFractionDigits: 2});
            document.getElementById('avgTHT').textContent = avgTHT.toLocaleString(undefined, {maximumFractionDigits: 2});
        }

        // Calculate initial totals
        updateSummaryTotals();

        // Add new row button functionality
        document.getElementById('addRow').addEventListener('click', function() {
            const today = new Date();
            const formattedDate = (today.getMonth() + 1) + '/' + today.getDate() + '/' + today.getFullYear();

            showStatus('Adding new row...', 'success');

            const wellIds = gasData.map(row => parseInt(row.wellId || 0));
            const suggestedWellId = wellIds.length > 0 ? Math.max(...wellIds) : 1;

            gasData.push({
                id: 0,
                wellId: suggestedWellId,
                date: formattedDate,
                flowRate: null,
                tbgChk: null,
                fthpBar: null,
                pipeId: null,
                orifice: null,
                diffP: null,
                fthtF: null,
                downTime: null,
                sepLiqRate: null,
                comments: ""
            });

            hot.loadData(gasData);
            hot.scrollViewportTo(gasData.length - 1);
            hot.selectCell(gasData.length - 1, 0);

            showStatus('New row added. Edit the row and click "Save Changes" when done.', 'success');
            updateSummaryTotals();
        });

        // Save changes button functionality
        document.getElementById('saveChanges').addEventListener('click', function() {
            showStatus('Saving changes...', 'success');

            try {
                const dataToSave = [];
                const sourceData = hot.getSourceData();

                for (let i = 0; i < sourceData.length; i++) {
                    const row = sourceData[i];

                    if (row.wellId || row.flowRate || row.downTime || row.comments || row.tbgChk) {
                        let dateValue = null;
                        if (row.date) {
                            try {
                                const dateObj = new Date(row.date);
                                if (!isNaN(dateObj.getTime())) {
                                    dateValue = dateObj.toISOString();
                                }
                            } catch (e) {
                                console.error("Error parsing date:", row.date, e);
                            }
                        }

                        dataToSave.push({
                            ID: parseInt(row.id, 10) || 0,
                            WellID: parseInt(row.wellId, 10) || 0,
                            Date: dateValue,
                            Flow_rate_m3_per_day: row.flowRate !== null && row.flowRate !== "" ? parseFloat(row.flowRate) : null,
                            Tbg_chk_mm: row.tbgChk !== null && row.tbgChk !== "" ? parseFloat(row.tbgChk) : null,
                            Fthp_bar: row.fthpBar !== null && row.fthpBar !== "" ? parseFloat(row.fthpBar) : null,
                            Pipe_id_mm: row.pipeId !== null && row.pipeId !== "" ? parseFloat(row.pipeId) : null,
                            Orifice_mm: row.orifice !== null && row.orifice !== "" ? parseFloat(row.orifice) : null,
                            Diff_p_in_H2O: row.diffP !== null && row.diffP !== "" ? parseFloat(row.diffP) : null,
                            Ftht_f: row.fthtF !== null && row.fthtF !== "" ? parseFloat(row.fthtF) : null,
                            Down_time_hrs: row.downTime !== null && row.downTime !== "" ? parseFloat(row.downTime) : null,
                            Sep_liq_rate_m3_per_day: row.sepLiqRate !== null && row.sepLiqRate !== "" ? parseFloat(row.sepLiqRate) : null,
                            Comments: row.comments || ""
                        });
                    }
                }

                console.log("Data being sent to server:", JSON.stringify(dataToSave));

                const token = $('input[name="__RequestVerificationToken"]').val();

                if (!token) {
                    showStatus('Error: Anti-forgery token not found', 'error');
                    return;
                }

                $.ajax({
                    url: '/HP_Gas?handler=UpdateData',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(dataToSave),
                    headers: {
                        "RequestVerificationToken": token,
                        "X-Requested-With": "XMLHttpRequest"
                    },
                    success: function(result) {
                        console.log("Server response:", result);
                        if (result.success) {
                            showStatus('Data saved successfully!', 'success');
                            loadPageData(currentPage);
                        } else {
                            showStatus('Error: ' + result.message, 'error');
                            console.error('Save error details:', result);
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('Save error status:', status);
                        console.error('Save error response:', xhr.responseText);
                        showStatus('Error saving data: ' + error, 'error');
                    }
                });
            } catch (e) {
                console.error("Javascript error during save:", e);
                showStatus('Error preparing data: ' + e.message, 'error');
            }
        });

        // CSV Export Functionality
        document.getElementById('exportCSV').addEventListener('click', function() {
            try {
                showStatus('Fetching all records for export...', 'success');

                // Build URL with proper parameter handling
                let url = `/HP_Gas?handler=AllData`;
                const params = new URLSearchParams();

                // Add date filters
                if (currentFromDate) {
                    params.append('dateFrom', currentFromDate);
                }
                if (currentToDate) {
                    params.append('dateTo', currentToDate);
                }

                // Add well filter parameters
                if (selectedWells.length > 0) {
                    selectedWells.forEach(wellId => {
                        params.append('selectedWells', wellId);
                    });
                }

                // Append parameters to URL if any exist
                if (params.toString()) {
                    url += '&' + params.toString();
                }

                console.log('CSV Export URL:', url);
                console.log('Selected wells for export:', selectedWells);

                $.ajax({
                    url: url,
                    type: 'GET',
                    headers: {
                        "X-Requested-With": "XMLHttpRequest",
                        "RequestVerificationToken": antiForgeryToken
                    },
                    beforeSend: function(xhr) {
                        console.log('Sending CSV export request...');
                    },
                    success: function(result) {
                        console.log('CSV export response:', result);

                        if (result && result.success) {
                            showStatus('Generating CSV file...', 'success');

                            if (!result.data || !Array.isArray(result.data)) {
                                showStatus('No data returned from server', 'error');
                                return;
                            }

                            const allData = result.data.map(item => {
                                return {
                                    id: item.id,
                                    wellId: item.wellID,
                                    date: item.date ? new Date(item.date).toLocaleDateString('en-US') : "",
                                    flowRate: item.flow_rate_m3_per_day,
                                    tbgChk: item.tbg_chk_mm,
                                    fthpBar: item.fthp_bar,
                                    pipeId: item.pipe_id_mm,
                                    orifice: item.orifice_mm,
                                    diffP: item.diff_p_in_H2O,
                                    fthtF: item.ftht_f,
                                    downTime: item.down_time_hrs,
                                    sepLiqRate: item.sep_liq_rate_m3_per_day,
                                    comments: item.comments || ""
                                };
                            });

                            const headers = [
                                "Well ID", "Date", "Qo (m³/d)", "Tbg Chk (mm)", "FTHP (bar)",
                                "Pipe ID (mm)", "Orifice (mm)", "Diff P (in H₂O)", "FTHT (°F)",
                                "Down Time (hrs)", "Sep Liq Rate (m³/d)", "Comments"
                            ];

                            let csvContent = headers.join(',') + '\n';

                            allData.forEach(function(row) {
                                let wellIdDisplay = row.wellId;
                                const matchingWell = wellIdOptions.find(well => well.id == row.wellId);
                                if (matchingWell) {
                                    wellIdDisplay = matchingWell.name;
                                }

                                let dateStr = row.date || '';

                                const csvRow = [
                                    escapeCsvValue(wellIdDisplay),
                                    escapeCsvValue(dateStr),
                                    escapeCsvValue(row.flowRate),
                                    escapeCsvValue(row.tbgChk),
                                    escapeCsvValue(row.fthpBar),
                                    escapeCsvValue(row.pipeId),
                                    escapeCsvValue(row.orifice),
                                    escapeCsvValue(row.diffP),
                                    escapeCsvValue(row.fthtF),
                                    escapeCsvValue(row.downTime),
                                    escapeCsvValue(row.sepLiqRate),
                                    escapeCsvValue(row.comments)
                                ];

                                csvContent += csvRow.join(',') + '\n';
                            });

                            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                            const downloadUrl = URL.createObjectURL(blob);
                            const link = document.createElement('a');

                            let filename = 'gas_wells_data';
                            if (currentFromDate || currentToDate || selectedWells.length > 0) {
                                filename += '_filtered';
                                if (currentFromDate) {
                                    filename += '_from_' + currentFromDate.replace(/-/g, '');
                                }
                                if (currentToDate) {
                                    filename += '_to_' + currentToDate.replace(/-/g, '');
                                }
                                if (selectedWells.length > 0) {
                                    filename += '_wells_' + selectedWells.length;
                                }
                            }
                            filename += '.csv';

                            link.setAttribute('href', downloadUrl);
                            link.setAttribute('download', filename);
                            link.style.visibility = 'hidden';

                            document.body.appendChild(link);
                            link.click();
                            document.body.removeChild(link);

                            showStatus(`CSV file generated successfully! Exported ${allData.length} records.`, 'success');
                        } else {
                            const errorMessage = result && result.message ? result.message : 'Unknown error occurred';
                            console.error('Server returned error:', errorMessage);
                            showStatus('Error fetching data for export: ' + errorMessage, 'error');
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('AJAX Error Details:');
                        console.error('Status:', status);
                        console.error('Error:', error);
                        console.error('Response Status:', xhr.status);
                        console.error('Response Text:', xhr.responseText);
                        console.error('Ready State:', xhr.readyState);

                        let errorMessage = 'Error fetching data for export: ';

                        if (xhr.status === 400) {
                            errorMessage += 'Bad Request - Check server-side parameter handling';
                        } else if (xhr.status === 500) {
                            errorMessage += 'Server Error - Check server logs';
                        } else if (xhr.status === 0) {
                            errorMessage += 'Network Error - Check connection';
                        } else {
                            errorMessage += `HTTP ${xhr.status} - ${error}`;
                        }

                        showStatus(errorMessage, 'error');

                        try {
                            const errorResponse = JSON.parse(xhr.responseText);
                            if (errorResponse && errorResponse.message) {
                                showStatus('Server Error: ' + errorResponse.message, 'error');
                            }
                        } catch (parseError) {
                            console.error('Could not parse error response as JSON');
                        }
                    }
                });
            } catch (e) {
                console.error('JavaScript Error during CSV export:', e);
                showStatus('Error during CSV export: ' + e.message, 'error');
            }
        });

        // Helper function to properly escape CSV values
        function escapeCsvValue(value) {
            if (value === null || value === undefined) return '';

            const str = String(value);

            if (str.includes(',') || str.includes('"') || str.includes('\n')) {
                return '"' + str.replace(/"/g, '""') + '"';
            }

            return str;
        }

        // Helper function to show status messages
        function showStatus(message, type) {
            const statusElement = document.getElementById('statusMessage');
            statusElement.textContent = message;
            statusElement.className = type;
            statusElement.style.display = 'block';

            setTimeout(function() {
                statusElement.style.display = 'none';
            }, 5000);
        }

        // Pagination functionality
        function renderPagination() {
            const pageButtonsContainer = document.getElementById('pageButtons');
            pageButtonsContainer.innerHTML = '';

            let startPage = Math.max(1, currentPage - 2);
            let endPage = Math.min(totalPages, startPage + 4);

            if (endPage - startPage < 4) {
                startPage = Math.max(1, endPage - 4);
            }

            for (let i = startPage; i <= endPage; i++) {
                const button = document.createElement('button');
                button.textContent = i;
                button.classList.toggle('active', i === currentPage);
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    loadPageData(i);
                });
                pageButtonsContainer.appendChild(button);
            }

            document.getElementById('currentPage').textContent = currentPage;
            document.getElementById('totalPages').textContent = totalPages;
            document.getElementById('totalRecords').textContent = totalRecords;

            document.getElementById('firstPage').disabled = currentPage === 1;
            document.getElementById('prevPage').disabled = currentPage === 1;
            document.getElementById('nextPage').disabled = currentPage === totalPages || totalPages === 0;
            document.getElementById('lastPage').disabled = currentPage === totalPages || totalPages === 0;
        }

        // Load page data from server with well filter support
        function loadPageData(page) {
            showStatus('Loading data...', 'success');

            let url = `/HP_Gas?handler=PagedData&page=${page}`;
            if (currentFromDate) url += `&dateFrom=${currentFromDate}`;
            if (currentToDate) url += `&dateTo=${currentToDate}`;

            // Add well filter parameters
            if (selectedWells.length > 0) {
                selectedWells.forEach(wellId => {
                    url += `&selectedWells=${wellId}`;
                });
            }

            console.log('Requesting URL:', url);
            console.log('Selected wells for filtering:', selectedWells);

            $.ajax({
                url: url,
                type: 'GET',
                headers: {
                    "X-Requested-With": "XMLHttpRequest",
                    "RequestVerificationToken": antiForgeryToken
                },
                success: function(result) {
                    if (result.success) {
                        currentPage = result.pagination.currentPage;
                        totalPages = result.pagination.totalPages;
                        totalRecords = result.pagination.totalRecords;

                        const tableData = result.data.map(item => {
                            return {
                                id: item.id,
                                wellId: item.wellID,
                                date: item.date ? new Date(item.date).toLocaleDateString('en-US') : "",
                                flowRate: item.flow_rate_m3_per_day,
                                tbgChk: item.tbg_chk_mm,
                                fthpBar: item.fthp_bar,
                                pipeId: item.pipe_id_mm,
                                orifice: item.orifice_mm,
                                diffP: item.diff_p_in_H2O,
                                fthtF: item.ftht_f,
                                downTime: item.down_time_hrs,
                                sepLiqRate: item.sep_liq_rate_m3_per_day,
                                comments: item.comments || ""
                            };
                        });

                        hot.loadData(tableData);
                        renderPagination();
                        updateSummaryTotals();
                        showStatus('Data loaded successfully!', 'success');

                        // Update URL without page reload to maintain state (only if not a fresh page load)
                        if (!isFreshPageLoad() && history.pushState) {
                            const newUrl = new URL(window.location.href);
                            newUrl.searchParams.set('CurrentPage', currentPage);

                            if (currentFromDate) {
                                newUrl.searchParams.set('dateFrom', currentFromDate);
                            } else {
                                newUrl.searchParams.delete('dateFrom');
                            }

                            if (currentToDate) {
                                newUrl.searchParams.set('dateTo', currentToDate);
                            } else {
                                newUrl.searchParams.delete('dateTo');
                            }

                            // Add selected wells to URL
                            newUrl.searchParams.delete('selectedWells');
                            selectedWells.forEach(wellId => {
                                newUrl.searchParams.append('selectedWells', wellId);
                            });

                            window.history.pushState({
                                page: currentPage,
                                dateFrom: currentFromDate,
                                dateTo: currentToDate,
                                selectedWells: [...selectedWells]
                            }, '', newUrl);
                        }
                    } else {
                        showStatus('Error loading data: ' + (result.message || 'Unknown error'), 'error');
                    }
                },
                error: function(xhr, status, error) {
                    console.log("Error status:", status);
                    console.log("Error text:", xhr.responseText);
                    showStatus('Error loading data: ' + (xhr.responseText || error), 'error');
                }
            });
        }

        // Handle browser back/forward buttons
        window.onpopstate = function(event) {
            if (event.state) {
                if (event.state.page) {
                    currentPage = event.state.page;
                }

                // Restore date filters
                if (event.state.dateFrom !== undefined) {
                    currentFromDate = event.state.dateFrom;
                    document.getElementById('dateFrom').value = currentFromDate || '';
                }
                if (event.state.dateTo !== undefined) {
                    currentToDate = event.state.dateTo;
                    document.getElementById('dateTo').value = currentToDate || '';
                }

                // Restore well filters
                if (event.state.selectedWells) {
                    // Clear current selection
                    $("#listBox2 option").appendTo("#listBox1");
                    selectedWells = [];

                    // Restore selection
                    event.state.selectedWells.forEach(wellId => {
                        const option = $(`#listBox1 option[value="${wellId}"]`);
                        if (option.length > 0) {
                            option.appendTo("#listBox2");
                            selectedWells.push(wellId);
                        }
                    });
                }

                updateFilterStatus();
                updateWellFilterStatus();
                loadPageData(currentPage);
            }
        };

        // Set up pagination event listeners
        document.getElementById('firstPage').addEventListener('click', function(e) {
            e.preventDefault();
            if (currentPage > 1) loadPageData(1);
        });

        document.getElementById('prevPage').addEventListener('click', function(e) {
            e.preventDefault();
            if (currentPage > 1) loadPageData(currentPage - 1);
        });

        document.getElementById('nextPage').addEventListener('click', function(e) {
            e.preventDefault();
            if (currentPage < totalPages) loadPageData(currentPage + 1);
        });

        document.getElementById('lastPage').addEventListener('click', function(e) {
            e.preventDefault();
            if (currentPage < totalPages) loadPageData(totalPages);
        });

        // Initialize pagination
        renderPagination();

        // Log data for debugging
        console.log("Gas data loaded:", gasData);
    </script>

    @Html.AntiForgeryToken()
</body>
</html>